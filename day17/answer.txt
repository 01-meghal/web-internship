// 1) what is javascript and how it is different from java?explain what javascript is used for and how it differs from the java programming language.
// JavaScript is a high-level, dynamic, and interpreted programming language that is primarily used for client-side scripting on the web.

// JavaScript is commonly used for:                    Java is commonly used for:
// Client-side scripting on the web                      Android app development
// Web application development                           Web application development
// Desktop and mobile application development            Enterprise software development
// Game development                                       Desktop application development 

//------------------------------------------------------------------------------------------------------------------

//2)what are the different datatypes in js? list and explain primitive and non-primitive data types in js?
// In JavaScript, there are two main categories of data types: Primitive and Non-Primitive (also known as Reference types).

// Primitive Data Types

// Primitive data types are the basic building blocks of JavaScript. They are immutable, meaning their values cannot be changed once created. There are 6 primitive data types in JavaScript:

// Number: Represents a numeric value, e.g., 42, 3.14, -100.
// String: Represents a sequence of characters, e.g., 'hello', "hello", hello (template literals).
// Boolean: Represents a logical value, either true or false.
// Null: Represents the absence of any object value, e.g., null.
// Undefined: Represents an uninitialized or non-existent variable, e.g., undefined.
// Symbol: Represents a unique identifier, introduced in ECMAScript 2015 (ES6), e.g., Symbol('foo').
// Non-Primitive Data Types (Reference Types)

// Non-primitive data types, also known as reference types, are more complex data structures that are mutable, meaning their values can be changed after creation. There are 3 non-primitive data types in JavaScript:

// Object: Represents a collection of key-value pairs, e.g., { name: 'John', age: 30 }.
// Array: Represents an ordered collection of values, e.g., [1, 2, 3], ['a', 'b', 'c'].
// Function: Represents a block of executable code, e.g., function add(a, b) { return a + b; }

//------------------------------------------------------------------------------------------------------------------

//3)what is the difference between var,let and const?explain their scope, hoisting behaviour,and mutability.
// Feature         var                      let                  const
// scope           fuction-scoped           block-scoped         block-scoped
// Reassignable    yes                      yes                  no
// Redeclaration   yes                      no                   no
// Hoisting        yes(initializes as       yes(but not          yes(but not  initialized)
                   undefined)               initialized)
// Mutable         yes                      yes                  yes(values inside can change)                    
//
//1.)scope
//  var is function-scoped: accessible anywhere inside the function.
//  let and const are block-scoped: accessible only within {} like if, for, or block.
//  Example:-function testScope() {
  if (true) {
    var a = 10;
    let b = 20;
    const c = 30;
  }
  console.log(a); //  Works
  console.log(b); //  ReferenceError
  console.log(c); //  ReferenceError
}
//2.)Hoisting
//var is hoisted and initialized as undefined.
//let and const are hoisted but not initialized — they stay in a "temporal dead zone" until the line they’re declared.
//  Example:-console.log(x); // undefined
var x = 5;
console.log(y); //  ReferenceError
let y = 5;
console.log(z); // ReferenceError
const z = 5;
//3.)mutability
//  You can change the value of var and let.
//  You cannot reassign a const, but if it’s an object or array, you can change its contents.
// Example:-const arr = [1, 2, 3];
arr.push(4); // Allowed
arr = [5, 6]; //  Not allowed — reassignment
let x = 10;
x = 20; //  Allowed
var y = "Hello";
y = "World"; //  Allowed

//------------------------------------------------------------------------------------------------------------------
//4)what is hoisting in javascript?describe how variable and function declaration are hoisted during compilation?
// Hoisting in JavaScript is a behavior where variables and functions are moved to the top of their scope, regardless of where  they 
// are actually declared. This means that variables and functions can be used before they are declared, as long as they are declared
//  before the end of their scope.
// When a variable is declared using var, it is "hoisted" to the top of its scope, but its assignment is not. This means that the
//  variable is declared, but its value is undefined until the assignment is executed.
// When a function is declared, it is also "hoisted" to the top of its scope, but its body is not. This means that the function is
//  declared, but its code is not executed until the function is called.

//---------------------------------------------------------------------------------------------------------------

//5)what is the difference b/w == and === operators in javascript?discuss type Coercion and strict equality.
// In JavaScript, == and === are two types of equality operators.
//  type Coercion(==)                         strict equality(===)
//  only check value                        check both value and type
//  type conversion happens                    no type conversion happens
//  e.g., 5 == '5' is true                    e.g., 5 === '5' is false

//------------------------------------------------------------------------------------------------------------------
//7.)Explain the concept of 'this' keyword in javascript . hoe does it behave in different contexts?discuss its behaviour in global scope, objects methods, arrow functions, etc .
//The this keyword refers to the object that is executing the current function.
Its value changes depending on how and where the function is called.
//1.)Global scope 


//------------------------------------------------------------------------------------------------------------------
//8.)what are promises in javascript and how do they help with asynchronous programming?explain the concept of promise, .then() , .catch() , and how they solve  callback hell.
// promises is a concept in js that is a result of an operation that may not have completed .
// there is 3 states of promises. fullfill, pending and rejected.
// .then() is used to handle the result of a fullfill promise.
// .catch() is used to handle the error of a promise or a rejected promise.
// callback hell is a problem that occur when we have a lot of nested callback function in our code .
// promises is a solution to this problem by providing a way to handle asynchronous operation in a more readable and maintainable way.
//example:-async function getalluser(){
    const response = await fetch("https://jsonplaceholder.typicode.com/comments")
    const data = await response.json()
    console.log(data)
}
getalluser()



